<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Pong Game</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f0f0f0;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    #pongContainer {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    canvas {
      border: 2px solid #000;
      border-radius: 8px;
      margin-top: 20px;
    }

    .scoreboard {
      display: flex;
      justify-content: space-between;
      width: 100%;
      margin-top: 20px;
      font-size: 24px;
    }

    .player-scores {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .player-scores span {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .controls {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
    }

    .controls p {
      font-weight: bold;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

<div id="pongContainer" class="container">
  <h1>Pong Game</h1>
  <canvas id="pongCanvas" width="800" height="500"></canvas>
  <div class="scoreboard">
    <div class="player-scores">
      <span>Player</span>
      <span id="scoreLeft">0</span>
    </div>
    <div class="player-scores">
      <span>AI</span>
      <span id="scoreRight">0</span>
    </div>
  </div>
  <div class="controls">
    <p>Player Controls:</p>
    <p>Move Paddle: Keyboard Movement</p>
    <p>Select Difficulty:</p>
  <select id="difficultySelect">
    <option value="easy">Easy</option>
    <option value="medium" selected>Medium</option>
    <option value="hard">Hard</option>
  </select>
  </div>
</div>
<script>
  const canvas = document.getElementById('pongCanvas');
  const ctx = canvas.getContext('2d');

  const ball = {
    x: canvas.width / 2,
    y: canvas.height / 2,
    radius: 10,
    speed: 5,
    dx: 5,
    dy: 5
  };

  const paddle = {
    width: 10,
    height: 80,
    speed: 8,
    left: {
      x: 10,
      y: canvas.height / 2 - 40
    },
    right: {
      x: canvas.width - 20,
      y: canvas.height / 2 - 40
    }
  };

  let scoreLeft = 0;
  let scoreRight = 0;

  let upPressed = false;
  let downPressed = false;
  let paused = false;

  const difficulties = {
    easy: {
      ballSpeed: 5,
      paddleSpeed: 8,
       aiSkill: 20 // Fixed typo here
    },
    medium: {
      ballSpeed: 7,
      paddleSpeed: 10,
      aiSkill: 25
    },
    hard: {
      ballSpeed: 10,
      paddleSpeed: 12,
      aiSkill: 40
    }
  };

  let currentDifficulty = difficulties.medium;

  function setDifficulty(difficulty) {
    currentDifficulty = difficulties[difficulty];
    ball.speed = currentDifficulty.ballSpeed;
    paddle.speed = currentDifficulty.paddleSpeed;
  }

  setDifficulty('medium');

  document.getElementById('difficultySelect').addEventListener('change', function() {
    const selectedDifficulty = this.value;
    setDifficulty(selectedDifficulty);
  });

  function keyDownHandler(event) {
    if (event.key === 'ArrowUp') {
      upPressed = true;
    } else if (event.key === 'ArrowDown') {
      downPressed = true;
    } else if (event.key === 'p' || event.key === 'P') {
      togglePause();
    }
  }

  function keyUpHandler(event) {
    if (event.key === 'ArrowUp') {
      upPressed = false;
    } else if (event.key === 'ArrowDown') {
      downPressed = false;
    }
  }

  function togglePause() {
    paused = !paused;
  }

  function drawBall() {
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
    ctx.fillStyle = '#000';
    ctx.fill();
    ctx.closePath();
  }

  function drawPaddles() {
    ctx.fillStyle = '#000';
    ctx.fillRect(paddle.left.x, paddle.left.y, paddle.width, paddle.height);
    ctx.fillRect(paddle.right.x, paddle.right.y, paddle.width, paddle.height);
  }

  function drawScores() {
    document.getElementById('scoreLeft').innerText = scoreLeft;
    document.getElementById('scoreRight').innerText = scoreRight;
  }

  function resetBall() {
    ball.x = canvas.width / 2;
    ball.y = canvas.height / 2;
    ball.dx = -ball.dx;
  }

  function update() {
    ball.x += ball.dx;
    ball.y += ball.dy;

    // Ball collision with walls
    if (ball.y + ball.radius >= canvas.height || ball.y - ball.radius <= 0) {
      ball.dy = -ball.dy;
    }

    // Ball collision with paddles
    if (
      ball.x + ball.radius >= paddle.right.x &&
      ball.y >= paddle.right.y &&
      ball.y <= paddle.right.y + paddle.height
    ) {
      ball.dx = -ball.dx;
    } else if (
      ball.x - ball.radius <= paddle.left.x + paddle.width &&
      ball.y >= paddle.left.y &&
      ball.y <= paddle.left.y + paddle.height
    ) {
      ball.dx = -ball.dx;
    }

    // Score update and reset ball position
    if (ball.x + ball.radius > canvas.width) {
      scoreLeft++;
      resetBall();
    } else if (ball.x - ball.radius < 0) {
      scoreRight++;
      resetBall();
    }
  }

  function moveAIPaddle() {
    const paddleCenter = paddle.right.y + paddle.height / 2;
    if (paddleCenter < ball.y - currentDifficulty.aiSkill) {
      paddle.right.y += paddle.speed;
    } else if (paddleCenter > ball.y + currentDifficulty.aiSkill) {
      paddle.right.y -= paddle.speed;
    }
  }

  function gameLoop() {
    if (!paused) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawBall();
      drawPaddles();
      drawScores();
      update();
      moveHumanPaddle();
      moveAIPaddle();
    }
    requestAnimationFrame(gameLoop);
  }

  function moveHumanPaddle() {
    if (upPressed && !downPressed && paddle.left.y > 0) {
      paddle.left.y -= paddle.speed;
    } else if (downPressed && !upPressed && paddle.left.y < canvas.height - paddle.height) {
      paddle.left.y += paddle.speed;
    }
  }

  document.addEventListener('keydown', keyDownHandler, false);
  document.addEventListener('keyup', keyUpHandler, false);

  gameLoop();
</script>
</body>
</html>
